/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package space.borisgk.findyourbookelastic.api.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;
import space.borisgk.findyourbookelastic.model.rest.Book;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-12-13T11:46:42.237920939+03:00[Europe/Moscow]")
@Validated
@Api(value = "book", description = "the book API")
public interface BookApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /book/{book_id}
     * Get information about book by book id
     *
     * @param bookId  (required)
     * @return Successful getting (status code 200)
     *         or Not found book by this book_id (status code 404)
     */
    @ApiOperation(value = "", nickname = "bookBookIdGet", notes = "Get information about book by book id", response = Book.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful getting", response = Book.class),
        @ApiResponse(code = 404, message = "Not found book by this book_id") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/book/{book_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Book> bookBookIdGet(@ApiParam(value = "", required = true) @PathVariable("book_id") String bookId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"protagonists\" : [ \"protagonists\", \"protagonists\" ], \"year\" : \"year\", \"genres\" : [ \"genres\", \"genres\" ], \"place_of_events\" : [ \"place_of_events\", \"place_of_events\" ], \"name\" : \"name\", \"time_of_events\" : [ \"time_of_events\", \"time_of_events\" ], \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"id\" : \"id\", \"tags\" : [ \"tags\", \"tags\" ], \"authors\" : [ { \"books_ids\" : [ 1, 1 ], \"name\" : \"name\", \"year_death\" : 6, \"poster_url\" : \"poster_url\", \"id\" : \"id\", \"biography\" : \"biography\", \"year_birth\" : 0 }, { \"books_ids\" : [ 1, 1 ], \"name\" : \"name\", \"year_death\" : 6, \"poster_url\" : \"poster_url\", \"id\" : \"id\", \"biography\" : \"biography\", \"year_birth\" : 0 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /book
     * Get all books
     *
     * @param page  (optional)
     * @return Successful getting (status code 200)
     *         or Not found any books (status code 404)
     */
    @ApiOperation(value = "", nickname = "bookGet", notes = "Get all books", response = Book.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful getting", response = Book.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Not found any books") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/book",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Book>> bookGet(@ApiParam(value = "") @Valid @RequestParam(value = "page", required = false) Integer page) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"protagonists\" : [ \"protagonists\", \"protagonists\" ], \"year\" : \"year\", \"genres\" : [ \"genres\", \"genres\" ], \"place_of_events\" : [ \"place_of_events\", \"place_of_events\" ], \"name\" : \"name\", \"time_of_events\" : [ \"time_of_events\", \"time_of_events\" ], \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"id\" : \"id\", \"tags\" : [ \"tags\", \"tags\" ], \"authors\" : [ { \"books_ids\" : [ 1, 1 ], \"name\" : \"name\", \"year_death\" : 6, \"poster_url\" : \"poster_url\", \"id\" : \"id\", \"biography\" : \"biography\", \"year_birth\" : 0 }, { \"books_ids\" : [ 1, 1 ], \"name\" : \"name\", \"year_death\" : 6, \"poster_url\" : \"poster_url\", \"id\" : \"id\", \"biography\" : \"biography\", \"year_birth\" : 0 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /book/search
     * Search books
     *
     * @param query  (required)
     * @param page  (optional)
     * @return Successful getting (status code 200)
     *         or Not found books (status code 404)
     */
    @ApiOperation(value = "", nickname = "bookSearchGet", notes = "Search books", response = Book.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful getting", response = Book.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Not found books") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/book/search",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Book>> bookSearchGet(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "") @Valid @RequestParam(value = "page", required = false) Integer page) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"protagonists\" : [ \"protagonists\", \"protagonists\" ], \"year\" : \"year\", \"genres\" : [ \"genres\", \"genres\" ], \"place_of_events\" : [ \"place_of_events\", \"place_of_events\" ], \"name\" : \"name\", \"time_of_events\" : [ \"time_of_events\", \"time_of_events\" ], \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"id\" : \"id\", \"tags\" : [ \"tags\", \"tags\" ], \"authors\" : [ { \"books_ids\" : [ 1, 1 ], \"name\" : \"name\", \"year_death\" : 6, \"poster_url\" : \"poster_url\", \"id\" : \"id\", \"biography\" : \"biography\", \"year_birth\" : 0 }, { \"books_ids\" : [ 1, 1 ], \"name\" : \"name\", \"year_death\" : 6, \"poster_url\" : \"poster_url\", \"id\" : \"id\", \"biography\" : \"biography\", \"year_birth\" : 0 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
