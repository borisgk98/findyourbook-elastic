/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package space.borisgk.findyourbookelastic.api.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;
import space.borisgk.findyourbookelastic.model.rest.Author;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-12-11T17:16:40.444092736+03:00[Europe/Moscow]")
@Validated
@Api(value = "author", description = "the author API")
public interface AuthorApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /author/{author_id}
     * Get information about author by author id
     *
     * @param authorId  (required)
     * @return Successful getting (status code 200)
     *         or Not found author by this author_id (status code 404)
     */
    @ApiOperation(value = "", nickname = "authorAuthorIdGet", notes = "Get information about author by author id", response = Author.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful getting", response = Author.class),
        @ApiResponse(code = 404, message = "Not found author by this author_id") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/author/{author_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Author> authorAuthorIdGet(@ApiParam(value = "", required = true) @PathVariable("author_id") Integer authorId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"books_ids\" : [ 5, 5 ], \"img_url\" : \"img_url\", \"name\" : \"name\", \"year_death\" : 1, \"id\" : 0, \"biography\" : \"biography\", \"year_birth\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /author
     * Get all authors
     *
     * @param page  (optional)
     * @return Successful getting (status code 200)
     *         or Not found any authors (status code 404)
     */
    @ApiOperation(value = "", nickname = "authorGet", notes = "Get all authors", response = Author.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful getting", response = Author.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Not found any authors") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/author",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Author>> authorGet(@ApiParam(value = "") @Valid @RequestParam(value = "page", required = false) Integer page) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"books_ids\" : [ 5, 5 ], \"img_url\" : \"img_url\", \"name\" : \"name\", \"year_death\" : 1, \"id\" : 0, \"biography\" : \"biography\", \"year_birth\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /author/search
     * Search authors
     *
     * @param query  (required)
     * @param page  (optional)
     * @return Successful getting (status code 200)
     *         or Not found authors (status code 404)
     */
    @ApiOperation(value = "", nickname = "authorSearchGet", notes = "Search authors", response = Author.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful getting", response = Author.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Not found authors") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/author/search",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Author>> authorSearchGet(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "") @Valid @RequestParam(value = "page", required = false) Integer page) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"books_ids\" : [ 5, 5 ], \"img_url\" : \"img_url\", \"name\" : \"name\", \"year_death\" : 1, \"id\" : 0, \"biography\" : \"biography\", \"year_birth\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
